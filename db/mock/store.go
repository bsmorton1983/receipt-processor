// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bsmorton1983/receipt_processor/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	db "github.com/bsmorton1983/receipt_processor/db/sqlc"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateReceipt mocks base method.
func (m *MockStore) CreateReceipt(arg0 context.Context, arg1 db.CreateReceiptParams) (db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceipt", arg0, arg1)
	ret0, _ := ret[0].(db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReceipt indicates an expected call of CreateReceipt.
func (mr *MockStoreMockRecorder) CreateReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceipt", reflect.TypeOf((*MockStore)(nil).CreateReceipt), arg0, arg1)
}

// CreateReceiptItem mocks base method.
func (m *MockStore) CreateReceiptItem(arg0 context.Context, arg1 db.CreateReceiptItemParams) (db.ReceiptItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReceiptItem", arg0, arg1)
	ret0, _ := ret[0].(db.ReceiptItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReceiptItem indicates an expected call of CreateReceiptItem.
func (mr *MockStoreMockRecorder) CreateReceiptItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReceiptItem", reflect.TypeOf((*MockStore)(nil).CreateReceiptItem), arg0, arg1)
}

// DeleteReceipt mocks base method.
func (m *MockStore) DeleteReceipt(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReceipt", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReceipt indicates an expected call of DeleteReceipt.
func (mr *MockStoreMockRecorder) DeleteReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReceipt", reflect.TypeOf((*MockStore)(nil).DeleteReceipt), arg0, arg1)
}

// DeleteReceiptItem mocks base method.
func (m *MockStore) DeleteReceiptItem(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReceiptItem", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReceiptItem indicates an expected call of DeleteReceiptItem.
func (mr *MockStoreMockRecorder) DeleteReceiptItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReceiptItem", reflect.TypeOf((*MockStore)(nil).DeleteReceiptItem), arg0, arg1)
}

// GetReceipt mocks base method.
func (m *MockStore) GetReceipt(arg0 context.Context, arg1 uuid.UUID) (db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceipt", arg0, arg1)
	ret0, _ := ret[0].(db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceipt indicates an expected call of GetReceipt.
func (mr *MockStoreMockRecorder) GetReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceipt", reflect.TypeOf((*MockStore)(nil).GetReceipt), arg0, arg1)
}

// GetReceiptItem mocks base method.
func (m *MockStore) GetReceiptItem(arg0 context.Context, arg1 uuid.UUID) (db.ReceiptItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReceiptItem", arg0, arg1)
	ret0, _ := ret[0].(db.ReceiptItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReceiptItem indicates an expected call of GetReceiptItem.
func (mr *MockStoreMockRecorder) GetReceiptItem(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReceiptItem", reflect.TypeOf((*MockStore)(nil).GetReceiptItem), arg0, arg1)
}

// ListReceiptItems mocks base method.
func (m *MockStore) ListReceiptItems(arg0 context.Context, arg1 db.ListReceiptItemsParams) ([]db.ReceiptItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReceiptItems", arg0, arg1)
	ret0, _ := ret[0].([]db.ReceiptItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceiptItems indicates an expected call of ListReceiptItems.
func (mr *MockStoreMockRecorder) ListReceiptItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceiptItems", reflect.TypeOf((*MockStore)(nil).ListReceiptItems), arg0, arg1)
}

// ListReceipts mocks base method.
func (m *MockStore) ListReceipts(arg0 context.Context, arg1 db.ListReceiptsParams) ([]db.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReceipts", arg0, arg1)
	ret0, _ := ret[0].([]db.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReceipts indicates an expected call of ListReceipts.
func (mr *MockStoreMockRecorder) ListReceipts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReceipts", reflect.TypeOf((*MockStore)(nil).ListReceipts), arg0, arg1)
}
